:py:mod:`VAMToolbox.geometry`
=============================

.. py:module:: VAMToolbox.geometry


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   VAMToolbox.geometry.ProjectionGeometry
   VAMToolbox.geometry.Volume
   VAMToolbox.geometry.TargetGeometry
   VAMToolbox.geometry.Sinogram
   VAMToolbox.geometry.Reconstruction



Functions
~~~~~~~~~

.. autoapisummary::

   VAMToolbox.geometry.defaultKwargs
   VAMToolbox.geometry.loadVolume
   VAMToolbox.geometry.getCircleMask
   VAMToolbox.geometry.getInds
   VAMToolbox.geometry.rebinFanBeam



.. py:function:: defaultKwargs(**default_kwargs)


.. py:class:: ProjectionGeometry(angles, ray_type, CUDA=False, **kwargs)

   .. py:method:: calcAbsorptionMask(self, target_geo)



.. py:class:: Volume(array: numpy.ndarray, proj_geo: ProjectionGeometry = None, options=None, **kwargs)

   .. py:method:: save(self, name: str)

      Save geometry object


   .. py:method:: show(self, savepath=None, dpi='figure', **kwargs)

      :param savepath:
      :type savepath: str, optional
      :param dpi: image dots per inch from `matplotlib.pyplot.savefig <https://matplotlib.org/3.5.0/api/_as_gen/matplotlib.pyplot.savefig.html>`_
      :type dpi: int, optional
      :param \*\*kwargs: accepts `matplotlib.pyplot.imshow <https://matplotlib.org/3.5.0/api/_as_gen/matplotlib.pyplot.imshow.html>`_ keyword arguments



.. py:class:: TargetGeometry(target=None, stlfilename=None, resolution=None, imagefilename=None, pixels=None, rot_angles=[0, 0, 0], print_bodies=None, options=None)

   Bases: :py:obj:`Volume`

   .. py:method:: show(self, show_insert=False, savepath=None, dpi='figure', **kwargs)

      :param savepath:
      :type savepath: str, optional
      :param dpi: image dots per inch from `matplotlib.pyplot.savefig <https://matplotlib.org/3.5.0/api/_as_gen/matplotlib.pyplot.savefig.html>`_
      :type dpi: int, optional
      :param \*\*kwargs: accepts `matplotlib.pyplot.imshow <https://matplotlib.org/3.5.0/api/_as_gen/matplotlib.pyplot.imshow.html>`_ keyword arguments



.. py:class:: Sinogram(sinogram: numpy.ndarray, proj_geo: ProjectionGeometry, options=None)

   Bases: :py:obj:`Volume`


.. py:class:: Reconstruction(reconstruction: numpy.ndarray, proj_geo: ProjectionGeometry, options=None)

   Bases: :py:obj:`Volume`


.. py:function:: loadVolume(file_name: str)

   Load saved VAMToolbox.geometry.Volume object

   :param file_name: filepath to Volume object e.g. "C:\\A\\sinogram.sino"
   :type file_name: str

   :returns:
   :rtype: VAMToolbox.geometry.Volume


.. py:function:: getCircleMask(target: numpy.ndarray)

   Generates a boolean mask of the inscribed circle of a square array

   :param target: square array to create a boolean mask
   :type target: np.ndarray

   :returns: boolean mask where inscribed circle is True, outside the circle is False
   :rtype: circle_mask


.. py:function:: getInds(target: numpy.ndarray)

   Gets gel and void indices of the boolean target array

   :param target: binary target array
   :type target: np.ndarray

   :returns: **gel_inds, void_inds** -- boolean arrays where the target is 1 (gel_inds) and where the target is 0 (void_inds)
   :rtype: np.ndarray


.. py:function:: rebinFanBeam(sinogram, vial_width, N_screen, n_write, throw_ratio)

   Rebins a parallel ray projection geometry (telecentric) to a converging fan beam projection geometry that can be used when the photopolymer vial is NOT indexed matched to its surrounding, i.e. when the projector light is directly incident on the outer wall of the vial at an air-vial interface.

   :param sinogram: sinogram generated for parallel ray geometry that is to be rebinned for use in a non telecentric VAM geometry
   :type sinogram: geometry.Sinogram
   :param vial_width: Apparent vial width in projector pixels.  Apparent vial width is only equal to true vial width if projection is telecentric.
   :type vial_width: int
   :param N_screen: (N_U,N_v), (# of pixels in u-axis, # of pixels in v-axis) of the projected screen
   :type N_screen: tuple
   :param n_write: refractive index at the wavelength used for writing (projector wavelength)
   :type n_write: float
   :param throw_ratio: Throw ratio of projector
   :type throw_ratio: float

   :returns:
   :rtype: Rebinned sinogram in geometry.Sinogram object

   Based on code by @author: Antony Orth

   Antony Orth, Kathleen L. Sampson, Kayley Ting, Jonathan Boisvert, and Chantal Paquet, "Correcting ray distortion in tomographic additive manufacturing," Opt. Express 29, 11037-11054 (2021)

   Please use the above citation if used in your work.

   *Note*
   The resampling process can be thought of as a resampling from the parallel beam case to the non-parallel beam case (ie. virtual projector to physical projector), where refraction alters the tranjectory of the rays in the vial.
   The basic idea is to consider that the physical projector should sample Radon space (virtual projector space) at the appropriate coordinates in the virtual projector space.
   In other words, each pixel on the physical projector at each instant in time, corresponds to a particular position in Radon space.  The correspondence is calculated with the equations for xv and thetav in the paper above.
   The desired object is Radon transformed (corresponding to the virtual projector space) and then resampled in the altered space that is accessible by the physical projector.

   In the paper above, the process is described as a resampling from the physical projector space to the virtual projector space.  However, it makes more sense to think of it the other way around (virtual to physical).  This may be addressed
   by a correction to the paper above in the near future (as of 18 Jan 2022).


