:py:mod:`VAMToolbox.metrics`
============================

.. py:module:: VAMToolbox.metrics


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   VAMToolbox.metrics.calcCV
   VAMToolbox.metrics.calcVER
   VAMToolbox.metrics.calcPW
   VAMToolbox.metrics.calcIPDR



.. py:function:: calcCV(target, recon, layerwise=False)

   Calculate coefficient of variance in target region

   :param target: target as the reference to which the reconstruction is compared
   :type target: geometry.TargetGeometry
   :param recon: reconstruction to evaluate
   :type recon: ndarray
   :param layerwise: if True, the CV is computed per z-slice
   :type layerwise: bool, optional

   :returns: if layerwise == True, ndarray will have size equal to the # of z slices
   :rtype: float or ndarray


.. py:function:: calcVER(target, recon, layerwise=False)

   Calculate volumetric error rate

   :param target: target as the reference to which the reconstruction is compared
   :type target: geometry.TargetGeometry
   :param recon: reconstruction to evaluate
   :type recon: ndarray
   :param layerwise: if True, the VER is computed per z-slice
   :type layerwise: bool, optional

   :returns: if layerwise == True, ndarray will have size equal to the # of z slices
   :rtype: float or ndarray


.. py:function:: calcPW(target, recon, layerwise=False)

   Calculate process window

   :param target: target as the reference to which the reconstruction is compared
   :type target: geometry.TargetGeometry
   :param recon: reconstruction to evaluate
   :type recon: ndarray
   :param layerwise: if True, the PW is computed per z-slice
   :type layerwise: bool, optional

   :returns: if layerwise == True, ndarray will have size equal to the # of z slices
   :rtype: float or ndarray


.. py:function:: calcIPDR(target, recon, layerwise=False)

   Calculate in-part dose range

   :param target: target as the reference to which the reconstruction is compared
   :type target: geometry.TargetGeometry
   :param recon: reconstruction to evaluate
   :type recon: ndarray
   :param layerwise: if True, the IPDR is computed per z-slice
   :type layerwise: bool, optional

   :returns: if layerwise == True, ndarray will have size equal to the # of z slices
   :rtype: float or ndarray


