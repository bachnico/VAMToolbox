:py:mod:`VAMToolbox.Projector.Projector2DParallel`
==================================================

.. py:module:: VAMToolbox.Projector.Projector2DParallel


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   VAMToolbox.Projector.Projector2DParallel.Projector2DParallelAstra
   VAMToolbox.Projector.Projector2DParallel.Projector2DParallelPython




Attributes
~~~~~~~~~~

.. autoapisummary::

   VAMToolbox.Projector.Projector2DParallel.astra_available


.. py:data:: astra_available
   :annotation: = True

   

.. py:class:: Projector2DParallelAstra(target_obj, proj_geo)

   .. py:method:: forward(self, target)

      Foward projector operation (b = Ax)


   .. py:method:: backward(self, sinogram)

      Backward projector operation (x = A^Tb)



.. py:class:: Projector2DParallelPython(target_obj, proj_geo)

   .. py:method:: generateOccSinogram(self)

      Create sinogram containing minimum values of 's' within the occlusion map

      :returns: * **occ_sinogram** (*nd_array*)
                * *Npixels x Nangles*


   .. py:method:: forward(self, target)

      Computes forward Radon transform of the target space object accounting for
      reduced projection contribution due to occlusion shadowing

      Inputs
      ---------------
      target : nd_array
      Npixels x Npixels array that contains the target space object

      :returns: * **projection** (*nd_array*)
                * *Npixels x Nangles array of forward Radon transform with occlusion shadowing*


   .. py:method:: backward(self, b, clipping=True)

      Computes inverse Radon transform of projection accounting for reduced dose
      deposition due to occlusion shadowing

      Inputs
      ---------------
      projection : nd_array
      Npixels x Nangles array that contains the projection space sinogram of the target

      :returns: * **projection** (*nd_array*)
                * *Npixels x Npixels array of inverse Radon transform with occlusion shadowing*


   .. py:method:: getOccShadow(self, i, angle, t, s)


   .. py:method:: calcVisibility(self)



